{"version":3,"sources":["logo.svg","components/card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CardBox","props","react_default","a","createElement","className","children","Image","src","image","alt","Name","name","Details","details","Star","_ref","_ref$selected","selected","_ref$onClick","onClick","f","Card","card_CardBox","card_Image","card_Name","card_Details","Object","toConsumableArray","Array","map","n","i","card_Star","key","starsSelected","change","id","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","places","getData","setState","uuid","logo","place","_this2","index","card_Card","OnChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7446fae3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst CardBox = (props) => {\r\n  return(\r\n    <div className=\"card-body\">\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Image = (props) => {\r\n  return(\r\n    <img src={props.image} alt=\"Logo\" className=\"picture\">\r\n    </img>\r\n  )\r\n}\r\n\r\nconst Name = (props) => {\r\n  return(\r\n    <div className=\"name\">\r\n      {props.name}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Details = (props) => {\r\n  return(\r\n    <div className=\"details\">\r\n      {props.details}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Star = ({ selected=false, onClick=f=>f }) =>\r\n <div className={(selected) ? \"star selected\" : \"star\"}\r\n      onClick={onClick}>\r\n </div>\r\n\r\nconst Card = (props) => {\r\n  return(\r\n    <CardBox>\r\n      <div className=\"inner-body\">\r\n        <Image image={props.image}/>\r\n        <div className=\"body\">\r\n          <div className=\"inner-body\">\r\n            <Name name={props.name}/>\r\n          </div>\r\n          <Details details={props.details}/>\r\n          <div className=\"inner-body\">\r\n          {[...Array(5)].map((n, i) =>\r\n            <Star key={i}\r\n                  selected={i<props.starsSelected}\r\n                  onClick={() => props.change(props.id, i+1)}\r\n          />)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </CardBox>\r\n  )\r\n}\r\n\r\nexport { Card }","import React, { Component } from 'react';\nimport { Card } from './components/card.js';\nimport logo from './logo.svg';\nimport uuid from 'uuid/v1';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state={\n      places:\n      [ \n      ]\n    }\n  }\n\n  componentWillMount() {\n    this.getData()\n  }\n\n  getData() {\n    this.setState({\n      places:[\n        {\n          id: uuid(),\n          name: \"16 Handles\",\n          details: \"Froyo\",\n          image: logo,\n          starsSelected: 0,\n        },\n        {\n          id: uuid(),\n          name: \"Tasti D-Lite\",\n          details: \"Froyo\",\n          image: logo,\n          starsSelected: 0,\n        },\n        {\n          id: uuid(),\n          name: \"Target\",\n          details: \"Shopping\",\n          image: logo,\n          starsSelected: 0,\n        },\n      ]\n    });\n  }\n\n  OnChange(id, starsSelected) {\n    this.setState(\n      [...this.state.places].map((place) => {\n        if(place.id === id) {\n          place.starsSelected = starsSelected\n        }\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"main-body\">\n        <div className=\"heading\"> \n          Places we've been\n        </div>\n\n        {[...this.state.places].map((place, index) => {\n          let name = place.name\n          let image = place.image\n          let details = place.details\n          let starsSelected = place.starsSelected\n          let id = place.id\n          return(\n            <Card\n              key={index}\n              name={name}\n              details={details}\n              image={image}\n              starsSelected={starsSelected}\n              id={id}\n              change={(id, starsSelected) => this.OnChange(id, starsSelected)}\n            />\n          )\n        })}      \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// npm run build\n// copy build folder contents to root (automate/replace this)\n// git add --all\n// git commit -m \"\"\n//git push origin master\n\n\n// npm install --save-dev gh-pages","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}